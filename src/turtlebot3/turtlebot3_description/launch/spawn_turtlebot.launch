<?xml version="1.0" ?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="ref_frame" default="camera_link"/>
  <!-- Initial position of the robot -->
 <!--<arg name="x" default="-7"/>-->
  <arg name="x" default="0"/>
 <!--<arg name="y" default="7"/>-->
 <arg name="y" default="0"/>
  
  <arg name="z" default="0.1"/>
  <arg name="R" default="0"/>
  <arg name="P" default="0"/>
  <arg name="Y" default="3.14"/>
  
  <arg name="las" default="false"/>


  <!-- We resume the logic in empty_world.launch -->
  <include file="$(find race_scenario)/launch/race_gazebo.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>


<!-- urdf xml robot description loaded on the Parameter Server-->  
  

  <param name="robot_description2" command="$(find xacro)/xacro '$(find turtlebot3_description)/urdf/turtlebot3_burger.urdf.xacro'"/> 

  

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner2" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model turtlebot_burger -param robot_description2 -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg Y)"/> 
	
 <!--<node pkg="tf" type="static_transform_publisher" name="base_footprint2base_link" args="0.0 0.0 0.010 0 0 0 /base_footprint /base_link 100"/>-->
	
 <node pkg="tf" type="static_transform_publisher" name="base_link2scan" args="-0.032 0 0.172 0 0 0 /base_link /base_scan 100"/>
 
 <!-- We resume the logic in gmapping.launch 
  <include file="$(find rl_robot_description_pkg)/launch/amcl.launch">
  </include>-->
 
 <!-- We resume the logic in gmapping.launch-->
  <include file="$(find rl_robot_description_pkg)/launch/gmapping.launch">
  </include>
  
  <!-- We resume the logic in move_base.launch
  <include file="$(find rl_robot_description_pkg)/launch/move_base.launch">
  </include> -->
  
  <!-- We resume the logic in marker_publisher.launch -->
  <include file="$(find aruco_ros)/launch/map_marker_publisher.launch">
  </include>
  
  <!-- We resume the logic in marker_publisher_iiwa.launch 
  <include file="$(find aruco_ros)/launch/marker_publisher_iiwa.launch">
  </include>-->
 
 <node pkg="tf" type="static_transform_publisher" name="base_foot2base_link" args="0 0 0.010 0 0 0 /base_footprint /base_link 100"/>
 <node pkg="tf" type="static_transform_publisher" name="base_link2camera" args="0.035 0 0.135 0 0 0 /base_link /camera_link 100"/>

 <node pkg="tf" type="static_transform_publisher" name="camera_link2camera_frame" args="0.0 0.0 0.0 0 -0.15 0 /camera_link /camera_rgb_frame 100"/>
 
 <node pkg="tf" type="static_transform_publisher" name="camera_frame2camera_rgb" args="0.0 0.0 0.0 -1.57 0 -1.57 /camera_rgb_frame /camera_rgb_optical_frame 100"/>
 
</launch>
